def p_expression(p):
    '''expression : exp expression1'''
    p[0] = p[1]
    return p[0]

def p_expression1(p):
    '''expression1 : LESSER relop exp top_relop
	| GREATER relop exp top_relop
	| EQUAL relop exp top_relop
	| NOTEQUAL relop exp top_relop
	| GREATEROREQUAL relop exp top_relop
    | LESSEROREQUAL relop exp top_relop
    | empty'''

def p_exp(p):
    '''exp : term top_exp exp1'''
    p[0] = p[1]

def p_exp1(p):
    '''exp1 : MINUS push_sign exp
	| PLUS push_sign exp
	| empty'''

def p_top_exp(p):
    '''top_exp : '''
    operator = pilaOperadores.top()
    if operator == Operations.PLUS.value or operator == Operations.MINUS.value:
        operator = pilaOperadores.pop()
        r_operand = pilaOperandos.pop()
        r_type = pTypes.pop()
        l_operand = pilaOperandos.pop()
        l_type = pTypes.pop()
        result_type = cube.getType(l_type, r_type, operator)
        if result_type != Type.ERROR.value:
            result = memory.pushVarInMemory(result_type, 1)
            q = Quad(operator, l_operand, r_operand, result)
            quadList.add_quad(q)
            pilaOperandos.push(result)
            pTypes.push(result_type)
        else:
            ErrorHandler.print(p.lineno(-1))

def p_term(p):
    '''term : factor top_factor term1'''
    return p[1]

def p_term1(p):
    '''term1 : DIVIDE push_sign term
		| TIMES push_sign term
		| empty'''

def p_factor(p):
    '''factor : LPAREN false_bottom expression RPAREN end_par
	| var_cte
	| ID push_id'''
    if len(p) > 3:
        p[0] = p[3]
    else:
        p[0] = p[1]
    return p[0]

def p_top_factor(p):
    '''top_factor :'''
    operator = pilaOperadores.top()
    if operator == Operations.TIMES.value or operator == Operations.DIVIDE.value:
        operator = pilaOperadores.pop()
        r_operand = pilaOperandos.pop()
        r_type = pTypes.pop()
        l_operand = pilaOperandos.pop()
        l_type = pTypes.pop()
        result_type = cube.getType(l_type, r_type, operator)
        if result_type != Type.ERROR.value:
            # calcular resultado
            result = memory.pushVarInMemory(result_type, 1)
            q = Quad(operator, l_operand, r_operand, result)
            quadList.add_quad(q)
            pilaOperandos.push(result)
            pTypes.push(result_type)
        else:
            ErrorHandler.print(p.lineno(-1))

def p_var_cte(p):
    '''var_cte : ID getidvalue
				| CTE_INT getvalue_i
				| CTE_FLOAT getvalue_f
				| cte_bool getvalue_b
				| ID list getarrayvalue
				| call getcallvalue'''
    if len(p) > 3:
        p[0] = p[3]
    else:
        p[0] = p[2]
    return p[0]

def p_getidvalue(p):
    '''getidvalue : '''
    id = p[-1]
    global currentFunc
    try:
        print(currentFunc.varTable)
        var = currentFunc.varTable[id]
        pTypes.push(memory.getType(var))
        pilaOperandos.push(var)
    except:
        print('Variable no definida', id)
        ErrorHandler.exitWhenError()
    return p[0]

def p_getvalue_i(p):
    '''getvalue_i : '''
    dir = memory.pushVarInMemory(Type.INT.value, 1)
    pTypes.push(Type.INT.value)
    pilaOperandos.push(dir)
    memory.setValue(dir, p[-1])

def p_getvalue_f(p):
    '''getvalue_f : '''
    dir = memory.pushVarInMemory(Type.FLOAT.value, 1)
    pTypes.push(Type.FLOAT.value)
    pilaOperandos.push(dir)
    memory.setValue(dir, p[-1])

def p_getvalue_b(p):
    '''getvalue_b : '''
    p[0] = memory.pushVarInMemory(Type.BOOL.value, 1)
    pTypes.push(Type.BOOL.value)
    pilaOperandos.push(p[0])
    memory.setValue(dir, p[-1])

def p_relop(p):
    '''relop : '''
    op = p[-1]
    if op == '<':
        pilaOperadores.push(Operations.LESSER.value)
    if op == '>':
        pilaOperadores.push(Operations.GREATER.value)
    if op == '<=':
        pilaOperadores.push(Operations.LESSEROREQUAL.value)
    if op == '==':
        pilaOperadores.push(Operations.EQUAL.value)
    if op == '>=':
        pilaOperadores.push(Operations.GREATEROREQUAL.value)
    if op == '!=':
        pilaOperadores.push(Operations.NOTEQUAL.value)

def p_top_relop(p):
    '''top_relop :'''
    operator = pilaOperadores.top()
    if operator == Operations.LESSER.value or operator == Operations.GREATER.value or operator == Operations.LESSEROREQUAL.value or operator == Operations.EQUAL.value or operator == Operations.GREATEROREQUAL.value or operator == Operations.NOTEQUAL.value:
        operator = pilaOperadores.pop()
        r_operand = pilaOperandos.pop()
        r_type = pTypes.pop()
        l_operand = pilaOperandos.pop()
        l_type = pTypes.pop()
        result_type = cube.getType(l_type, r_type, operator)
        if result_type != Type.ERROR.value:
            result = memory.pushVarInMemory(Type.BOOL.value, 1)
            q = Quad(operator, l_operand, r_operand, result)
            quadList.add_quad(q)
            pilaOperandos.push(result)
            pTypes.push(result_type)
        else:
            ErrorHandler.print(p.lineno(-1))

def p_push_sign(p):
    '''push_sign :'''
    if not p[-1] is None:
        sign = p[-1]
    if sign is "/":
        pilaOperadores.push(Operations.DIVIDE.value)
    elif sign is "*":
        pilaOperadores.push(Operations.TIMES.value)
    elif sign is "+":
        pilaOperadores.push(Operations.PLUS.value)
    elif sign is "-":
        pilaOperadores.push(Operations.MINUS.value)
    elif sign is "=":
        pilaOperadores.push(Operations.ASSIGN.value)

def p_false_bottom(p):
    '''false_bottom :'''
    if p[-1] is "(":
        pilaOperadores.push(Operations.LPAREN.value)

def p_end_par(p):
    '''end_par :'''
    if p[-1] is ")":
        pilaOperadores.pop()

def p_push_id(p):
    '''push_id : '''
    id = p[-1]
    try:
        var = currentFunc.varTable[id]
        pilaOperandos.push(var)
        pTypes.push(currentFunc.memory.getType(var))
    except:
        print("ID no encontrado", p[-1])
        ErrorHandler.exitWhenError()
